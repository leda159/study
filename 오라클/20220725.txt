문제)
SCOTT 사원과 급여가 동일하거나 더 많이 받는 사원에 대해
다음과 같이 출력되도록 쿼리를 작성하세요 단
서브쿼리를 사용
부서코드 부서명 사원코드 사원명 급여
(단,부서코드,사원코드 순으로 정렬)

select  e.deptno as 부서코드,
        d.dname as 부서명,
        e.empno as 사원코드,
        e.ename as 사원명,
        e.sal as 급여	
   from emp e,dept d
  where e.deptno = d.deptno
    and e.sal >= (select sal
                  from emp
                 where ename = 'SCOTT')
 order by e.deptno,e.empno;

문제)
10번 부서 사원중 급여를 가장 많이 사원보다 더 많은 급여를
받는 사원에 대해 다음과 같이 출력하는 쿼리를 작성하세요
부서코드 부서명 사원코드 사원명 급여
(단,부서코드,사원코드 순으로 정렬)

select e.deptno as 부서코드,
        d.dname as 부서명,
        e.empno as 사원코드,
        e.ename as 사원명,
        e.sal as 급여
  from emp e,dept d
 where e.deptno = d.deptno
   and e.sal > (select max(sal)
                from emp
               where deptno = 10)
order by e.deptno,e.empno;


문제)
10번 부서에 근무하는 사원중 30번 부서에는
존재하지 않는 직책을 가진 사원들에 대해 다음과 같이
출력하는 쿼리를 작성하세요

부서코드 부서명 사원명 직책(단 부서코드,이름순 정렬)


select e.deptno as 부서코드,
       d.dname as 부서명,
       e.ename as 사원명,
       e.job as 직책
  from emp e,dept d
 where e.deptno = d.deptno
   and e.deptno = 10
   and e.job not in (select distinct job
		     from emp
                    where deptno = 30)
order by e.deptno,e.ename;


문제) 자신의 상사직원이 KING인 사원에 대해 다음과 같이
     출력하는 쿼리를 작성하세요

     부서코드 부서명 사원코드 사원명
     (단,부서코드,사원코드 순으로 정렬)

select e.deptno as 부서코드,
       d.dname as 부서명,
       e.empno as 사원코드,
       e.ename as 사원명
  from emp e,dept d
 where e.deptno = d.deptno
   and e.mgr = (select empno
	        from emp
               where ename = 'KING')
order by e.deptno,e.empno;





문제)
부서별 최고 급여를 받는 사원에 대해 다음과 같이 출력
하는 쿼리를 작성하세요 (단,부서코드,사원코드순)
부서코드 부서명 사원명 급여

select e.deptno as 부서코드,
       d.dname as 부서명,
       e.ename as 사원명,
       e.sal as 급여
  from emp e,dept d
 where e.deptno = d.deptno
   and (e.deptno,e.sal) in (select deptno,
			           max(sal)
                              from emp
                             group by deptno)
order by e.deptno,e.empno;


테스트 테이블 생성하는 방법

데이터만 복사된다
create table emp0725
       as select * from emp;



문제)
테이블은 emp0725 테이블 사용

10번,20번 부서 사원중 급여가 2000원에서 8000원
사이의 사원에 대해 이름앞에 (수정)이라는 문자열을
update하는 쿼리를 작성하세요

update emp0725
   set ename = '수정'||ename 
 where deptno in (10,20)
   and sal between 2000 and 8000;

commit;

select *
  from emp0725
 where ename like '%수정%';


문제)
emp0725 테이블 사용
보너스를 받고 있는 사원에 대해 급여 150% 인상,
보너스 50%인상하는 update 쿼리를 작성하세요

update emp0725
   set sal = round(sal + (sal * 1.5),0),
       comm = round(comm + (comm * 0.5),0)
 where comm is not null;

commit;




문제)
보너스를 받는 사원에 대해 emp,emp0725 두개의 테이블을
사용하여 다음과 같이 출력하는 쿼리를 작성하세요

부서코드 부서명 사원코드 사원명 인상전급여 인상후급여 인상전보너스 인상후보너스
(단,부서코드,사원코드 순으로 정렬)




select e1.deptno as 부서코드,
       d.dname as 부서명,
       e1.empno as 사원코드,
       e1.ename as 사원명,
       e1.sal as 인상전급여,
       e2.sal as 인상후급여,
       e1.comm as 인상전보너스,
       e2.comm as 인상후보너스
  from emp e1,emp0725 e2,dept d
 where e1.deptno = d.deptno 
   and e1.empno = e2.empno
   and e1.comm is not null
order by e1.deptno,e1.empno;


문제)
부서코드 부서명 입사년도 사원수
(단 부서코드 순으로 정렬)

select e.deptno as 부서코드,
       max(d.dname) as 부서코드,
       to_char(e.hiredate,'yyyy') as 입사년도,
       count(*) as 사원수
  from emp e,dept d
 where e.deptno = d.deptno
group by e.deptno,to_char(e.hiredate,'yyyy')
order by e.deptno,to_char(e.hiredate,'yyyy');

select e.deptno as 부서코드,
       max(d.dname) as 부서명,
       count(*) as 총인원수,
       sum(case when to_char(hiredate,'mm') = '01' then 1 else 0 end) as 입사1월,
       sum(case when to_char(hiredate,'mm') = '02' then 1 else 0 end) as 입사2월,
       sum(case when to_char(hiredate,'mm') = '03' then 1 else 0 end) as 입사3월,
       sum(case when to_char(hiredate,'mm') = '04' then 1 else 0 end) as 입사4월,
       sum(case when to_char(hiredate,'mm') = '05' then 1 else 0 end) as 입사5월,
       sum(case when to_char(hiredate,'mm') = '06' then 1 else 0 end) as 입사6월,
       sum(case when to_char(hiredate,'mm') = '07' then 1 else 0 end) as 입사7월,
       sum(case when to_char(hiredate,'mm') = '08' then 1 else 0 end) as 입사8월,
       sum(case when to_char(hiredate,'mm') = '09' then 1 else 0 end) as 입사9월,
       sum(case when to_char(hiredate,'mm') = '10' then 1 else 0 end) as 입사10월,
       sum(case when to_char(hiredate,'mm') = '11' then 1 else 0 end) as 입사11월,
       sum(case when to_char(hiredate,'mm') = '12' then 1 else 0 end) as 입사12월	
  from emp e,dept d
 where e.deptno = d.deptno
group by e.deptno
order by e.deptno;




시퀀스(sequence) 사용 방법
- 자동으로 컬럼의 값을 증가시킴

게시판 테이블(board) 생성

bno (게시물번호) 숫자(5) pk
title (제목) 문자열(100) not null
content (내용) 문자열(100) not null
writer (작성자) 문자열(50) not null
regdate (작성일자) date
updatedate (수정일자) date

select * from board;




시퀀스 생성
create sequence seq_board
increment by 1
start with 1
minvalue 1
maxvalue 100
nocycle
nocache;

select seq_board.currval from dual;
오류발생

Sequence SEQ_BOARD이(가) 생성되었습니다.

insert into board(bno,title,content,writer,regdate)
     values (seq_board.nextval,
             '상품반품',
             '상품손상으로 교환요청',
             '이순신',
             sysdate);

select * from board;

현재 시퀀스 번호를 알아보는 방법

dual:실제 테이블이 아니고 dummy table이라고 한다.

select seq_board.currval
  from dual;

시퀀스 삭제
drop sequence seq_board;

뷰(view) ?
가상 테이블로 하나 이상의 테이블을 조회하는 select
문을 저장하고 있는 객체(object)를 말함


문제)
10번,20번 부서 사원중 보너스를 받는 사원에 대해
부서코드,부서명,사원코드,사원명을 뷰로 생성
뷰이름:v_emp

create view v_emp
  as (select e.deptno,
             d.dname,
             e.empno,
             e.ename
        from emp e,dept d
       where e.deptno = d.deptno
         and e.deptno in (10,20)
         and e.comm is not null
     );

View V_EMP이(가) 생성되었습니다.

select * from v_emp;

문제)
10번,30번 사원에 대해 급여와 보너스 합계가 8000원에서
12000원 사이의 사원에 대해 뷰를 생성
뷰컬럼: deptno,empno,ename
뷰이름:v_emp_salary

create view v_emp_salary
    as (select deptno,empno,ename
	  from emp
         where deptno in (10,30)
           and sal + nvl(comm,0) between 8000 and 12000 
	);

select * from v_emp_salary;

view 사용 이유?
1.편리성:여러 테이블을 join시 편리하게 사용가능
2.보안성:테이블의 특정 컬럼을 노출하고 싶지 않는 경우 사용

view 삭제

drop view 뷰이름;

drop view v_emp_salary;

오라클 제약 조건

1.NOT NULL : 지정한 컬럼에 반드시 값이 있어야 하는 조건

2.UNIQUE : 지정한 컬럼이 반드시 유일한 값을 가져야 한다.

3.PRIMARY KEY : 지정한 컬럼이 UNIQUE하고 NOT NULL이어
                야 한다.

4.FOREIGN KEY : 다른 테이블의 PK인 컬럼을 참조하여
                존재하는 값만 입력 가능한 조건

5.CHECK : 설정한 조건식을 만족하는 데이터만 입력 가능한
          조건

FOREIGN KEY 예제
create table dept_fk(
   deptno number(2) constraint deptfk_deptno_pk
                   primary key,
   dname varchar(50)	
);

create table emp_fk(
    empno number(4) constraint empfk_empno_pk
                    primary key,
    ename varchar2(50),
    deptno number(2) constraint empfk_deptno_fk
                  references dept_fk(deptno)
);


select * from dept_fk;

insert into emp_fk values(1000,'홍길동',10);

ORA-02291: 무결성 제약조건(TEST.EMPFK_DEPTNO_FK)이 위배되었습니다
- 부모 키가 없습니다

insert into dept_fk values(10,'영업팀');
insert into emp_fk values(1000,'홍길동',10);
commit;

select * from dept_fk;
select * from emp_fk;

delete from dept_fk
      where deptno = 10;
      
ORA-02292: 무결성 제약조건(TEST.EMPFK_DEPTNO_FK)이 위배되었습니다
- 자식 레코드가 발견되었습니다

delete from emp_fk where deptno = 10;

delete from dept_fk where deptno = 10;

제약조건 check 예제

create table table_check(
login_id varchar2(20) constraint
         tblck_loginid_pk primary key,
login_pw varchar2(20)
 constraint tblck_loginpw_ck 
       check(length(login_pw) > 3),
 tel varchar2(13)
);


insert into table_check
     values ('hong','123','010-1111-2222');

ORA-02290: 체크 제약조건(TEST.TBLCK_LOGINPW_CK)이 위배되었습니다

insert into table_check
     values ('hong','12345','010-1111-2222');


select * from table_check;


문제)

1.사용자 생성
  score / score1234
  
  c:> sqlplus /nolog
  SQL> connect /as sysdba
  SQL> create user score identified by score1234; 

2.권한주기
  SQL> grant dba,resource,connect to score;

3.sqldeveloper에 등록
  name:성적테스트

4.테이블생성
  student (학생테이블)
  학생번호(no) numeric(5) pk
  학생이름(name) varchar2(50) not null
  연락처(phone) varchar2(13) not null
  이메일(email) varchar2(50)
  등록일자(regdate) date
  수정일자(updatedate) date
  
 
  성적테이블(score) 생성
  학생번호(no) numeric(5) pk
  국어성적(kor) numeric(3) not null
  영어성적(eng) numeric(3) not null
  수학성적(math) numeric(3) not null
  총합계(total) numeric(3)
  평균(avg) number(4,1)
  학점(grade) varchar2(1)

5.시퀀스 생성 (seq_student_no)
  시퀀스를 사용하여 student 테이블에 insert

  create sequence seq_student_no;	


  홍길동 010-1111-2222  test1@naver.com
  이순신 010-2222-3333  test2@naver.com
  강감찬 010-5555-6666  test3@naver.com

  insert into student(no,name,phone,email,regdate)
      values(seq_student_no.nextval,'홍길동','010-1111-2222','test1@naver.com',sysdate);
  insert into student(no,name,phone,email,regdate)
      values(seq_student_no.nextval,'이순신','010-2222-3333','test2@naver.com',sysdate);
  insert into student(no,name,phone,email,regdate)
      values(seq_student_no.nextval,'강감찬','010-5555-6666','test1@naver.com',sysdate);
  commit;	

  select * from student;

5-1.성적테이블에 foreign key 생성
    foreign key이름: score_no_fk

6.홍길동 성적 => 80 70 40
  이순신 성적 => 100 60 50
  강감찬 성적 => 90 60 70

  성적테이블에 insert 한다

  insert into score(no,kor,eng,math)
        values(2,80,70,40);
  insert into score(no,kor,eng,math)
        values(3,100,60,50);
  insert into score(no,kor,eng,math)
        values(4,90,60,70);
  commit;

  select * from score;	

7.update문을 사용하여 총합계,평균,학점을 수정한다.
  학점은 평균 90점 이상이면 A
        평균 80점대 이면 B  
        평균 70점대 이면 C  
        평균 60점대 이면 D
        평균 60점 미만이면 F

   update score
      set total = kor + eng + math,
          avg = round((kor + eng + math) / 3,1),
          grade = case when round((kor + eng + math) / 3,1) >= 90 then 'A'
                       when round((kor + eng + math) / 3,1) >= 80 then 'B'
                       when round((kor + eng + math) / 3,1) >= 70 then 'C'
 		       when round((kor + eng + math) / 3,1) >= 60 then 'D'
                       else 'F'
                  end;

 select * from score;


8. 학생번호 학생이름 국어성적 영어성적 수학성적 총점 과목최저점수 과목최고점수
  (단,학생번호 순으로 정렬)
  과목최저점수 => least(kor,eng,math)
  과목최고점수 => greatest(kor,eng,math)

  select s.no as 학생번호,
         s.name as 학생명,
         s1.kor as 국어성적,
         s1.eng as 영어성적,
         s1.math as 수학성적,
	 s1.total as 총점,
	 least(s1.kor,s1.eng,s1.math) as 과목최저점수,
	 greatest(s1.kor,s1.eng,s1.math) as 과목최고점수
    from student s,score s1
   where s.no = s1.no
order by s.no;





